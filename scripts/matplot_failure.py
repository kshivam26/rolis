import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import FuncFormatter

def millions(x, pos):
    return '%1.1fM' % (x * 1e-6)
formatter = FuncFormatter(millions)

txt = """
180940	299930	508170
194200	313960	530550
192630	311490	553650
210730	303040	533890
210470	310820	538770
264020	352030	541160
270150	415120	619070
274690	439480	692490
266310	456990	742350
273510	438520	781320
273320	445310	766120
275570	438200	765770
251940	443410	791980
260500	450990	781010
273540	442650	777790
274860	429680	781290
274560	434880	786740
275240	449990	782670
270370	455600	734020
274400	445340	796680
272390	442530	782260
278270	446480	788520
273670	450380	772780
273340	433170	797480
276430	451430	798860
276030	453430	781590
274570	454230	776770
271120	435600	788070
274740	450620	774280
276470	449180	796980
271220	458300	776590
275510	440740	773180
270380	446110	780820
242000	446350	792300
272680	440000	770550
273100	456500	788940
276690	429650	770350
271790	454470	784300
272350	452950	785780
270240	442410	803390
274470	441410	773030
274800	441690	784950
273770	452800	783650
273230	433220	784890
271490	456550	789490
271170	436930	771280
269930	434450	794900
278850	431300	766550
267780	446170	793210
272730	450360	780690
274030	453110	787150
273520	448560	768530
272750	430530	785400
276240	439760	782220
279600	432810	752170
270680	444880	793350
273270	450190	782780
278980	444430	786970
269480	452930	775290
274180	434450	799490
272250	430080	794300
270650	444090	786150
278220	442450	776130
272060	447460	783260
268080	451410	785330
270720	437910	775260
269830	438730	774630
269490	458850	782840
268950	449670	762770
264770	453770	779990
270680	449460	789670
266920	442900	776330
269480	449060	774000
268960	450410	796430
273080	449640	769980
276070	449510	775910
269150	438790	766240
272090	450960	762360
271090	445120	781640
269340	451050	777690
272250	450190	785370
271450	433850	778050
274570	451630	787400
272210	454600	776880
270870	435810	770830
266020	428300	789440
270880	440800	785720
273960	443230	776300
279380	448530	771210
272560	447810	772610
271760	449630	775040
269210	448130	776420
273610	446420	770760
271730	449410	784020
269920	437520	766140
270920	448460	786650
270770	446090	773510
271090	442530	768310
271640	450390	778190
269840	440830	766950
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
0	0	0
214680	389010	0
240800	415440	0
242550	394020	704370
262500	408310	711060
314850	448680	715040
321010	530510	677760
326000	544740	667820
328090	533870	869680
326370	539220	924650
327060	524930	938110
322170	536260	933220
324060	536750	924330
327790	541370	958420
325690	543920	942650
325660	546450	948360
329640	536500	936470
324160	539030	938730
324620	539260	934770
325120	529830	929830
324190	543090	937860
326010	532810	941110
328240	527970	931010
327230	501090	921740
325880	530880	938800
326110	546060	942190
327020	539300	940000
322130	529520	941160
324460	523710	916370
328030	534430	942180
323240	541520	947760
304790	540800	936430
306670	532100	935500
325900	527140	955110
320450	535460	941110
318570	517370	945250
319510	496590	931800
319160	492740	947560
320340	535330	937400
317580	529620	942780
317810	541420	946810
315970	533520	940100
320770	523790	936060
322940	533800	935400
320970	531090	929130
317870	531930	912630
322510	515480	941450
320140	490720	942000
316660	534410	934770
316540	526500	939140
316500	506470	938170
323440	520640	940240
315990	525040	936950
309930	511770	948090
287170	506860	940850
314390	521530	949560
318780	527080	938260
317310	516330	934430
319870	513950	945790
323190	523340	945600
319720	515200	874740
321790	530080	940730
326000	525310	933540
320690	526730	929140
321000	525130	939340
319000	531990	938910
320470	522940	928410
320580	534470	937510
314990	527230	933840
316140	509590	912930
314410	514020	935770
317600	521460	927480
315970	521190	908390
322730	531300	882560
319750	523530	931010
325020	532790	935340
323120	501850	941220
323900	492000	935570
323250	507190	928650
317930	513870	927840
318570	518580	911560
311250	519290	888840
304760	514500	944660
307910	510200	921150
304760	506450	875610
306300	498990	889680
295560	501400	876840
299410	491160	847390
299900	486000	841350
294770	480220	827150
288880	472380	815620
288650	447670	808380
281580	457690	827890
279400	456790	817990
281010	466320	821770
283900	448280	826110
278470	437050	812410
277830	465630	819270
280700	442600	818500
285950	468500	814400
284450	461310	818820
281990	459880	819570
281920	455210	807470
278280	464760	819490
282760	454210	824700
278130	445630	818570
279910	450370	823420
280540	458770	796820
281560	466010	827510
281260	459870	828710
277310	466040	819410
278280	464640	818560
278790	465350	821460
281110	456230	818490
281100	459550	904320
283440	462070	822040
281860	461310	804790
282280	463480	827860
279970	466340	821450
277940	457100	820620
281190	460670	827670
283780	458010	817210
282060	454590	819070
275960	457930	820660
276760	465540	814610
276470	454630	820470
283950	457330	819000
280830	453460	817130
284740	465580	815380
283690	459530	816620
282760	440410	813390
283720	445710	801300
280850	458550	827030
278480	458340	814430
279710	456200	820960
282960	460820	827660
282230	461900	806450
282820	466220	816720
277480	445780	824060
281360	452180	819590
278930	468960	816210
280740	463250	799840
279630	464590	809120
258560	460860	806780
270730	458600	825830
283200	463050	816690
283400	455260	808110
280580	450660	794860
279000	457470	821560
281170	458810	810980
284060	466850	813100
282600	457870	791120
275030	467080	818630
279560	456800	817100
277690	445300	833690
276550	465450	834970
281120	466440	812220
276570	465530	817040
279780	462140	818520
278850	461190	823130
273370	450090	812400
278850	469760	812640
277360	462280	794750
281200	464020	817190
277880	463050	809360
281060	466150	826520
279160	473470	826450
279610	469670	824220
280660	466320	833310
275740	468390	797210
277660	462100	813010
278590	467320	808480
277270	467490	811740
282600	454640	822090
280250	467060	812110
280130	454750	830380
280580	461060	773960
278260	461920	806920
278360	463050	822130
281640	467690	817350
276160	459330	810050
279250	463880	795550
277730	458540	807690
278740	453010	821500
280350	464190	807830
"""
value_0, value_1, value_2, value_3 = [], [], [], []
idx = 0
for l in txt.split("\n"):
    items = l.replace("\n", "").split("\t")
    if len(items) != 3:
        continue
    idx += 1
    value_0.append(float(items[0]))
    value_1.append(float(items[1]))
    value_2.append(float(items[2]))
    #value_3.append(float(items[3]))

keys_0=[i+1 for i in range(len(value_0))]
keys_1=[i+1 for i in range(len(value_1))]
keys_2=[i+1 for i in range(len(value_2))]
#keys_3=[i+1 for i in range(len(value_3))]

plt.rcParams["font.size"] = 30
matplotlib.rcParams['lines.markersize'] = 14
matplotlib.rcParams['lines.markersize'] = 14
plt.rcParams["font.family"] = "serif"
fig, ax = plt.subplots(figsize=(14, 9))

ax.yaxis.set_major_formatter(formatter)
print(keys_0)
ax.plot(keys_0, value_0, label='4 threads', linewidth=3)
ax.plot(keys_1, value_1, label='8 threads', linewidth=3)
ax.plot(keys_2, value_2, label='16 threads', linewidth=3)
# ax.plot(keys_3, value_3, label='32 cores')
ax.legend(bbox_to_anchor=(0, 0.92, 1, 0.2), mode="expand", ncol=2, loc="upper left", borderaxespad=0.2, frameon=False)
ax.set_xticks(list(range(1, 306, 50)))
ax.set_xticklabels([int(e/10) for e in list(range(0, 306, 50))])

# ax.set(xlabel='Time (sec)',
#        ylabel='Throughput (txns/sec)',
#        title=None)
ax.set_xlabel("Time (sec)", fontname="serif")
ax.set_ylabel("Throughput (txns/sec)", fontname="serif")
ax.legend(bbox_to_anchor=(0, 0.92, 1, 0.2), mode="expand", ncol=4, loc="upper left", borderaxespad=0.2, frameon=False)
ax.grid()
for tick in ax.get_xticklabels():
    tick.set_fontname("serif")
for tick in ax.get_yticklabels():
    tick.set_fontname("serif")
fig.savefig("failure_recovery.eps", format='eps', dpi=1000)
plt.show()